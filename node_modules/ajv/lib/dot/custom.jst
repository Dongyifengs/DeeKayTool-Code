




{{
  var $rule = this
    , $definition = 'definition' + $lvl
    , $rDef = $rule.definition
    , $closingBraces = '';
  var $validate = $rDef.validate;
  var $compile, $inline, $macro, $ruleValidate, $validateCode;
}}


  {{
    $validateCode = 'keywordValidate' + $lvl;
    var $validateSchema = $rDef.validateSchema;
  }}
  var  = RULES.custom[''].definition;
  var  = .validate;

  {{
    $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
    if (!$ruleValidate) return;
    $schemaValue = 'validate.schema' + $schemaPath;
    $validateCode = $ruleValidate.code;
    $compile = $rDef.compile;
    $inline = $rDef.inline;
    $macro = $rDef.macro;
  }}


{{
  var $ruleErrs = $validateCode + '.errors'
    , $i = 'i' + $lvl
    , $ruleErr = 'ruleErr' + $lvl
    , $asyncKeyword = $rDef.async;

  if ($asyncKeyword && !it.async)
    throw new Error('async keyword in sync schema');
}}


 = null;
var  = errors;
var ;

{{## def.callRuleValidate:
  .call(
    thisself
    
      , 
    
      , 
      , 
      , validate.schema
    
    , 
    
    , rootData
  )
#}}

{{## def.extendErrors:_inline:
  for (var =; <errors; ++) {
    var  = vErrors[];
    if (.dataPath === undefined)
      .dataPath = (dataPath || '') + ;
    
      .schemaPath = "";
    
    
      .schema = ;
      .data = ;
    
  }
#}}



  
  if ( === undefined) {
     = true;
  } else {
  
    
     = .validateSchema();
    if () {
  



  
    
  
     = ;
  

  
  {{
    $it.schema = $ruleValidate.validate;
    $it.schemaPath = '';
  }}
  
  
  
  

  
    
  

  
     = await ;
  
    
      
      var  = null;
      try {
         = await ;
      } catch (e) {
         = false;
        if (e instanceof ValidationError)  = e.errors;
        else throw e;
      }
    
       = null;
       = ;
    
  



  if ()  = [];




{{## def.notValidationResult:
  
    !
  
    
  
#}}


   if (true) { 

  if () {
    
    
      
    

    
      
        
          
        
      
        
          
        
          if ( == errors) {
            
          } else {
            
          }
        
      
    
      
    
      
        
      
        if (Array.isArray()) {
          if (vErrors === null) vErrors = ;
          else vErrors = vErrors.concat();
          errors = vErrors.length;
          
        } else {
          
        }
      
    

  }  else { 

