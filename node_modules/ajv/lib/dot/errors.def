

{{## def._error:_rule:
  
  
    {
      keyword: ''
      , dataPath: (dataPath || '') + 
      , schemaPath: 
      , params: 
      
        , message: 
      
      
        , schema: 
        , parentSchema: validate.schema
        , data: 
      
    }
  
    {}
  
#}}


{{## def._addError:_rule:
  if (vErrors === null) vErrors = [err];
  else vErrors.push(err);
  errors++;
#}}


{{## def.addError:_rule:
  var err = ;
  
#}}


{{## def.error:_rule:
  
    
  

  
    
    
      throw new ValidationError([]);
    
      validate.errors = [];
      return false;
    
  
    var err = ;
    
  
#}}


{{## def.extraError:_rule:
  
  
    
    
      throw new ValidationError(vErrors);
    
      validate.errors = vErrors;
      return false;
    
  
#}}


{{## def.checkError:_rule:
  if (!) {
    
  }
#}}


{{## def.resetErrors:
  errors = ;
  if (vErrors !== null) {
    if () vErrors.length = ;
    else vErrors = null;
  }
#}}


' +  + '#}}
' + '#}}
' +  + '#}}

{{## def._errorMessages = {
  'false schema':  "'boolean schema is false'",
  $ref:            "'can\\\'t resolve reference '",
  additionalItems: "'should NOT have more than  items'",
  additionalProperties: "'is an invalid additional propertyshould NOT have additional properties'",
  anyOf:           "'should match some schema in anyOf'",
  const:           "'should be equal to constant'",
  contains:        "'should contain a valid item'",
  dependencies:    "'should have property properties  when property  is present'",
  'enum':          "'should be equal to one of the allowed values'",
  format:          "'should match format \"\"'",
  'if':            "'should match \"' +  + '\" schema'",
  _limit:          "'should be  ",
  _exclusiveLimit: "' should be boolean'",
  _limitItems:     "'should NOT have morefewer than  items'",
  _limitLength:    "'should NOT be longershorter than  characters'",
  _limitProperties:"'should NOT have morefewer than  properties'",
  multipleOf:      "'should be multiple of ",
  not:             "'should NOT be valid'",
  oneOf:           "'should match exactly one schema in oneOf'",
  pattern:         "'should match pattern \"\"'",
  propertyNames:   "'property name \\'\\' is invalid'",
  required:        "'is a required propertyshould have required property \\'\\''",
  type:            "'should be '",
  uniqueItems:     "'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)'",
  custom:          "'should pass \"\" keyword validation'",
  patternRequired: "'should have property matching pattern \\'\\''",
  switch:          "'should pass \"switch\" keyword validation'",
  _formatLimit:    "'should be  \"\"'",
  _formatExclusiveLimit: "' should be boolean'"
} #}}


validate.schema #}}
validate.schema #}}

{{## def._errorSchemas = {
  'false schema':  "false",
  $ref:            "",
  additionalItems: "false",
  additionalProperties: "false",
  anyOf:           "validate.schema",
  const:           "validate.schema",
  contains:        "validate.schema",
  dependencies:    "validate.schema",
  'enum':          "validate.schema",
  format:          "",
  'if':            "validate.schema",
  _limit:          "",
  _exclusiveLimit: "validate.schema",
  _limitItems:     "",
  _limitLength:    "",
  _limitProperties:"",
  multipleOf:      "",
  not:             "validate.schema",
  oneOf:           "validate.schema",
  pattern:         "",
  propertyNames:   "validate.schema",
  required:        "validate.schema",
  type:            "validate.schema",
  uniqueItems:     "",
  custom:          "validate.schema",
  patternRequired: "validate.schema",
  switch:          "validate.schema",
  _formatLimit:    "",
  _formatExclusiveLimit: "validate.schema"
} #}}


 #}}

{{## def._errorParams = {
  'false schema':  "{}",
  $ref:            "{ ref: '' }",
  additionalItems: "{ limit:  }",
  additionalProperties: "{ additionalProperty: '' }",
  anyOf:           "{}",
  const:           "{ allowedValue: schema }",
  contains:        "{}",
  dependencies:    "{ property: '', missingProperty: '', depsCount: , deps: '' }",
  'enum':          "{ allowedValues: schema }",
  format:          "{ format:  }",
  'if':            "{ failingKeyword:  }",
  _limit:          "{ comparison: , limit: , exclusive:  }",
  _exclusiveLimit: "{}",
  _limitItems:     "{ limit:  }",
  _limitLength:    "{ limit:  }",
  _limitProperties:"{ limit:  }",
  multipleOf:      "{ multipleOf:  }",
  not:             "{}",
  oneOf:           "{ passingSchemas:  }",
  pattern:         "{ pattern:  }",
  propertyNames:   "{ propertyName: '' }",
  required:        "{ missingProperty: '' }",
  type:            "{ type: '' }",
  uniqueItems:     "{ i: i, j: j }",
  custom:          "{ keyword: '' }",
  patternRequired: "{ missingPattern: '' }",
  switch:          "{ caseIndex:  }",
  _formatLimit:    "{ comparison: , limit: , exclusive:  }",
  _formatExclusiveLimit: "{}"
} #}}
